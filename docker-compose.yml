# Versão da sintaxe do Docker Compose
version: '3.8'

# Seção onde definimos todos os nossos contêineres (serviços)
services:

  # 1. Serviço da nossa API de Delivery
  app:
    # Instrui o Docker a construir a imagem usando o Dockerfile
    # que está na mesma pasta (indicado pelo '.')
    build: .
    # Mapeia a porta 8080 do contêiner para a porta 8080 da sua máquina local,
    # permitindo que você acesse a API pelo navegador.
    ports:
      - "8080:8080"
    # Define as variáveis de ambiente que serão injetadas no contêiner da aplicação.
    # Elas são essenciais para a comunicação com os outros serviços.
    environment:
      # Ativa o perfil "docker", fazendo o Spring Boot carregar o application-docker.properties
      - SPRING_PROFILES_ACTIVE=docker
      # URL de conexão para o banco de dados MySQL.
      # 'db' é o nome do serviço do MySQL definido abaixo. O Docker Compose resolve isso internamente.
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/deliverydb?createDatabaseIfNotExist=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=admin
      # Endereço do nosso serviço de cache Redis.
      # 'redis' é o nome do serviço do Redis definido abaixo.
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
    # Garante que os contêineres 'db' e 'redis' sejam iniciados ANTES do contêiner 'app'.
    depends_on:
      - db
      - redis
    # Conecta este serviço à nossa rede privada para que os contêineres possam se comunicar.
    networks:
      - delivery-network

  # 2. Serviço do Banco de Dados MySQL
  db:
    # Usa a imagem oficial do MySQL versão 8.0 do Docker Hub.
    image: mysql:8.0
    # Mapeia a porta 3306 do MySQL para a sua máquina, caso você queira conectar
    # um cliente de banco de dados (como o DBeaver) para inspecionar os dados.
    ports:
      - "3306:3306"
    # Variáveis de ambiente para configurar o MySQL na inicialização.
    environment:
      - MYSQL_ROOT_PASSWORD=admin # Senha do usuário root
      - MYSQL_DATABASE=deliverydb # Cria um banco de dados com este nome
    # Cria um "volume" para persistir os dados do MySQL.
    # Sem isso, os dados seriam perdidos toda vez que o contêiner fosse reiniciado.
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - delivery-network

  # 3. Serviço do Cache com Redis
  redis:
    # Usa a imagem oficial e leve do Redis baseada em Alpine Linux.
    image: redis:alpine
    ports:
      - "6379:6379"
    # Cria um volume para persistir os dados do cache, se necessário.
    volumes:
      - redis-data:/data
    networks:
      - delivery-network

# Seção que declara os volumes nomeados para garantir a persistência dos dados.
volumes:
  db-data:
  redis-data:

# Seção que declara nossa rede customizada.
# Isso cria uma rede privada para os nossos contêineres se comunicarem de forma segura.
networks:
  delivery-network:
